---
title: "PC2_Mosqueira"
author: "Adriana Mosqueira"
date: "2/7/2022"
output:
  rmdformats::material:
  code_folding: show
  self_contained: true
  thumbnails: false
  lightbox: false
pkgdown:
  as_is: yes

---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
library(rtweet)
library(tidyverse)
library(twitteR)
library(ROAuth)
library(httr)
library(tm)
library(SnowballC)
library(openssl)
library(httpuv)
library(rio)

```

```{r, include=FALSE}
#create_token(app = "PROJECT 1", consumer_key='OS1a8kuslshTMQtCHoEINXcis', #consumer_secret='wgaQ1zjKMULhtINQcQ9PE66grDQuFjCCZYCKed5cxFfHJsuN2R', #access_token='571496961-uNXB8P0ZDxnQK46ogQeDBnwaKiKeb1zgmHxt6KUf', #access_secret='RJhKP4Mjh9V7tu0lg071JmU1740ZpLs4IpGeVzdoVn1L8')
```

```{r, include=FALSE}
#boric <- get_timeline("@gabrielboric", 1000)
#boric[1,5]
```

```{r}
boric = import("boric_gabriel.csv")
```

```{r, include=FALSE}
#table(boric$text)
```

```{r, include=FALSE}
boric$text=gsub("Ã±","ñ",boric$text)
boric$text=gsub("Ã³","ó",boric$text)
boric$text=gsub("Ãº","ú",boric$text)
boric$text=gsub("Ã­","í",boric$text)
boric$text=gsub("Ã¡","á",boric$text)
boric$text=gsub("Ã©","é",boric$text)
boric$text=gsub("Â","",boric$text)
boric$text=gsub("â€˜","'",boric$text)
boric$text=gsub("â€™","´",boric$text)
boric$text=gsub("ðŸ”µâšª","",boric$text)
boric$text=gsub("ðŸ¶","",boric$text)
boric$text=gsub("âš ï¸|","",boric$text)
boric$text=gsub("ðŸ‘€â—ï¸","",boric$text)
boric$text=gsub("â€œ","'",boric$text)
boric$text=gsub("ðŸ’œ","",boric$text)
boric$text=gsub("ðŸ€","",boric$text)
boric$text=gsub("ðŸ”´","",boric$text)
boric$text=gsub("âš ï¸|","",boric$text)
boric$text=gsub("ðŸ˜","",boric$text)
boric$text=gsub("âš ï¸|","",boric$text)
boric$text=gsub("â™¥ï¸","",boric$text)
```

```{r}
max(boric$created_at); min(boric$created_at)
head(boric$text)
```

```{r}
clean <- boric$text
clean[990]
```

```{r}
library(tm)
micorpus <- Corpus(VectorSource(clean))
length(micorpus)
content(micorpus[1])
```

```{r}
# Convertir a minusculas
content(micorpus[1])
micorpus <- tm_map(micorpus,content_transformer(tolower)) 
content(micorpus[1])
```

```{r}
#remueve URLs
content(micorpus[990])
removerURL <- function(x) gsub("http[^[:space:]]*", "", x)
micorpus <- tm_map(micorpus, content_transformer(removerURL))
content(micorpus[990])
```

```{r}
#eliminar tildes
content(micorpus[1])
removerTILDE <- function(x) chartr('áéíóú','aeiou',x)
micorpus <- tm_map(micorpus, removerTILDE)
content(micorpus[1])
```

```{r}
#eliminar ?s
content(micorpus[1])
remover <- function(x) chartr('?','n',x)
micorpus <- tm_map(micorpus, remover)
content(micorpus[1])
```

```{r}
#remover @otros usuarios
content(micorpus[990])
removerUSUARIOS <- function(x) gsub("@\\w+", "", x)
micorpus <- tm_map(micorpus, removerUSUARIOS)
content(micorpus[990])
```

```{r}
# Quitar la puntuación
content(micorpus[1])
micorpus <- tm_map(micorpus, removePunctuation)
content(micorpus[1])
```

```{r}
#quitar números
content(micorpus[35])
micorpus <- tm_map(micorpus, removeNumbers)
content(micorpus[35])
```

```{r}
# Ya hay una lista predeterminada. Hay una lista por cada idioma. 
stopwords("spanish")[1:20]
stopwords("english")[1:20]
```

```{r}
content(micorpus[1])
micorpus <- tm_map(micorpus, removeWords,c(stopwords("spanish")))
content(micorpus[1])
```

```{r}
#Eliminar espacios en blanco, varios espacios en blanco se contraen en uno solo
content(micorpus[1])
micorpus <- tm_map(micorpus, stripWhitespace)
content(micorpus[1])
```

```{r}
removerRETWEETS <- function(x) gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", x)
micorpus <- tm_map(micorpus, removerRETWEETS)
content(micorpus[12])
```

```{r}
limpiar_texto<- function(x){
  x<-str_to_lower(x)
  x<- str_replace_all(x, "http[^[:space:]]*", "") # Direcciones
  x<- str_replace_all(x, "\\?","") # Signo de interrogación
  x<- str_replace_all(x, "(?<=\\s)\\@[:alpha:]{1,15}","") # Usuarios de twitter
  x<- str_replace_all(x, "\\_|\\)|\\(|\\/|\\.|\\,|\\;","") # Signos de puntuación
  x<- str_replace_all(x, "\\d","")
  x<- Corpus(VectorSource(x))
 x<- tm_map(x, removeWords,c(stopwords("spanish")))
}
clean2<-limpiar_texto(clean)
content(clean2[1:10])
clean2 <- tm_map(clean2, stripWhitespace)
content(clean2[1:10])
```

```{r}
term <- TermDocumentMatrix(micorpus)
```

```{r}
findFreqTerms(term,lowfreq = 20)
```

```{r}
##Top Frequent Terms#

# Convierte a una matriz
m <- as.matrix(term)
head(m)
```

```{r}
# Conteo de palabras en orden decreciente
wf <- sort(rowSums(m),decreasing=TRUE)
wf
head(wf)
```

```{r}
dm <- data.frame(word = names(wf), freq=wf)
head(dm)
```

```{r}
dm1 <- dm
hist(dm1$freq)
dm1 <- subset(dm1, dm1$freq >= 10)
dm1
```

#Barras, sobre las 20 palabras más usadas

```{r}
ggplot(dm1, aes( x= word, y=freq )) + geom_bar(stat="identity") +
  xlab("Terminos") + ylab("Frecuencia") + coord_flip() +
  theme(axis.text=element_text(size=7))

barplot(dm1[1:20,]$freq, las = 2, names.arg = dm1[1:20,]$word,
        col ="paleturquoise2", main ="Top 5 palabras más frecuentes",
        ylab = "Palabras más frecuentes")
```

# Wordcloud

```{r}
library(wordcloud)
head(dm)
termcount <- data.frame(freq = apply(term,1,sum))
head(termcount)

#wordcloud(dm$word, dm$freq, random.order=FALSE, min.freq=2, colors=brewer.pal(8, "Dark2"))
wordcloud(dm$word, dm$freq, max.words = 80, random.order = F, colors = brewer.pal(name = "Dark2", n = 8))
```
# Modelamiento
## Palabras asociadas a las palabras más utilizadas

```{r}
findAssocs(term, c("derechos"), c(0.30))
```
```{r}
findAssocs(term, c("chile"), c(0.30))
```

```{r}
findAssocs(term, c("mujer"), c(0.30))
```

```{r}
findAssocs(term, c("salud"), c(0.30))
```

```{r}
findAssocs(term, c("confianza"), c(0.30))
```

## Eliminar palabras menos frecuentes

```{r}
tdm2 <- removeSparseTerms(term, sparse = 0.95)
m2 <- as.matrix(tdm2)
distMatrix <- dist(scale(m2))
fit <- hclust(distMatrix, method = "ward.D")
plot(fit)
rect.hclust(fit, k = 3)
```

# Análisis de sentimientos

```{r}
#install.packages("SentimentAnalysis")
library(SentimentAnalysis)
```

```{r}
sentimientos <- analyzeSentiment(textolimpio,language = "spanish")

sentimientos_final <- data.frame(textolimpio,
                                 sentiment = convertToDirection(sentimientos$SentimentGI))
head(sentimientos_final)
str(sentimientos_final)
table(sentimientos_final$sentiment)

sentimientos_final$score <- 0
sentimientos_final$score[sentimientos_final$sentiment == "positive"] <- 1
sentimientos_final$score[sentimientos_final$sentiment == "negative"] <- -1

head(sentimientos_final)
table(sentimientos_final$score)
```







